# 環境構築＋demoアプリ

ReactとNode.jsを使用してアプリケーションを作成する際の一般的な手順と、それを具体化する簡単なコード例を紹介します。Reactはフロントエンドのライブラリであり、Node.jsはバックエンドのランタイム環境です。

まず、アプリケーションの概要を理解する必要があります。Reactでフロントエンドのルーティングを行い、Node.jsでAPIを作成します。ここでは、フロントエンドでユーザーにフォームを表示し、そのデータを[Node.js](https://tailwindcss.com/docs/display)のAPIに送信して、何らかの処理を行うといった基本的な機能を持つアプリケーションを想定します。

### 実装手順

1. **環境セットアップ**: Node.jsがインストールされていることを確認し、新しいReactアプリケーションを作成します。
2. **Reactアプリケーションの作成**: `create-react-app` コマンドを使用して新しいReactプロジェクトを作成します。
3. **APIサーバーのセットアップ**: Expressを使用してNode.jsでAPIサーバーを設定します。
4. **ルーティングの設定**: React Routerを使用してフロントエンドのルーティングを設定し、APIエンドポイントへのリクエストを準備します。
5. **APIの実装**: Node.jsでAPIのエンドポイントを実装し、フロントエンドからのリクエストを処理します。
6. **データのやり取り**: ReactからNode.jsのAPIにデータを送信し、レスポンスをフロントエンドに表示します。
7. **テスト**: アプリケーションのフロントエンドとバックエンドの機能をテストします。
8. **デプロイ**: 完成したアプリケーションをデプロイします。

### 具体的なコード例

### 1. 環境セットアップ

Node.jsがインストールされているか確認します。

```bash
node -v
npm -v

```

Reactプロジェクトを作成します。

```bash
npx create-react-app my-app
cd my-app
npm start

```

### 2. APIサーバーのセットアップ (Node.js)

`server` という新しいディレクトリをプロジェクトのルートに作成し、`express` をセットアップします。

```bash
mkdir server
cd server
npm init -y
npm install express

```

サーバーを設定するための基本的なコード例です (`server/index.js`):

```jsx
const express = require('express');
const app = express();

app.use(express.json());

app.post('/api/data', (req, res) => {
  // リクエストボディからデータを受け取る
  const data = req.body;
  console.log(data);
  // 簡単なレスポンスを返す
  res.status(200).json({ message: 'データを受け取りました' });
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));

```

### 3. Reactフロントエンドのルーティング (React Router)

Reactアプリケーションに `react-router-dom` パッケージをインストールします。

```bash
npm install react-router-dom

```

Reactコンポーネントでルーティングを設定します (`src/App.js`):

```jsx
import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import HomePage from './HomePage';
import SubmitPage from './SubmitPage

';

function App() {
  return (
    <Router>
      <Switch>
        <Route exact path="/" component={HomePage} />
        <Route path="/submit" component={SubmitPage} />
      </Switch>
    </Router>
  );
}

export default App;

```

ここで、`HomePage` と `SubmitPage` はそれぞれのルートで表示されるコンポーネントです。

### 4. APIへのデータ送信 (React)

フォームデータをAPIに送信する機能を持つコンポーネントの例です (`src/SubmitPage.js`):

```jsx
import React, { useState } from 'react';

function SubmitPage() {
  const [data, setData] = useState('');

  const handleSubmit = async (event) => {
    event.preventDefault();
    try {
      const response = await fetch('/api/data', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ data }),
      });
      const result = await response.json();
      console.log(result);
    } catch (error) {
      console.error('エラーが発生しました:', error);
    }
  };

  return (
    <div>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          value={data}
          onChange={(e) => setData(e.target.value)}
        />
        <button type="submit">送信</button>
      </form>
    </div>
  );
}

export default SubmitPage;

```

このコードは簡単な例であり、実際のアプリケーションではさらに詳細なエラーハンドリング、状態管理、スタイリングが必要になるかもしれません。

### テストとデプロイ

ローカルでアプリケーションをテストした後、HerokuやNetlifyなどのプラットフォームにデプロイできます。デプロイプロセスはプラットフォームによって異なります。

これらの手順とコードはあくまで出発点であり、実際にはアプリケーションの要件に合わせて調整する必要があります。


GolangとReact(TypeScript)を用いたWEBアプリケーションを作成する際には、フロントエンドとバックエンドの両方について考える必要があります。この場合、Dockerを使って開発環境を構築するという要求がありますので、Dockerを使った開発フローも含めて説明することが重要です。

**アプリケーションの例として考えられるのは、TODOリスト管理アプリです。**

このアプリケーションは以下のような機能を持つことが考えられます：

1. ユーザーはTODOリストを作成できる。
2. ユーザーはTODOリストにタスクを追加できる。
3. ユーザーはタスクを完了としてマークできる。

開発手順は以下のようになります：

### ステップ 1: 開発環境の設定

1. **DockerとDocker Composeのインストール**: 開発環境にDockerがまだインストールされていなければ、Docker公式サイトからインストールします。Docker Composeも必要ですので、これもインストールしてください。
2. **プロジェクトのディレクトリ構造の作成**: プロジェクトのルートに `frontend` と `backend` の二つのディレクトリを作成します。
    
    ```jsx
    mkdir todo-app
    cd todo-app
    mkdir frontend backend
    ```
    
3. **Dockerファイルの作成**: `frontend` と `backend` 各ディレクトリにDockerfileを作成します。
    - **frontend/Dockerfile**: Reactアプリケーション用のDockerfileです。
        
        ```jsx
        # frontend/Dockerfile
        # ビルド環境
        FROM node:14 AS build
        WORKDIR /app
        COPY package.json package-lock.json ./
        RUN npm install
        COPY . ./
        RUN npm run build
        
        # 実行環境
        FROM nginx:stable-alpine
        COPY --from=build /app/build /usr/share/nginx/html
        EXPOSE 80
        CMD ["nginx", "-g", "daemon off;"]
        ```
        
    - **backend/Dockerfile**: Golangアプリケーション用のDockerfileです。
        
        ```jsx
        # backend/Dockerfile
        FROM golang:1.16-alpine AS build
        WORKDIR /src
        COPY go.mod go.sum ./
        RUN go mod download
        COPY . .
        RUN CGO_ENABLED=0 go build -o /bin/todo
        
        FROM scratch
        COPY --from=build /bin/todo /bin/todo
        EXPOSE 8080
        ENTRYPOINT ["/bin/todo"]
        ```
        
4. **Docker Composeファイルの作成**: ルートディレクトリに `docker-compose.yml` ファイルを作成し、frontendとbackendのサービスを定義します。
    
    ```jsx
    # docker-compose.yml
    version: '3.8'
    services:
      frontend:
        build: ./frontend
        ports:
          - "3000:80"
        depends_on:
          - backend
        environment:
          - REACT_APP_BACKEND_URL=http://localhost:8080
    
      backend:
        build: ./backend
        ports:
          - "8080:8080"
    ```
    
- Goのインストール
    
    エラーメッセージ `zsh: command not found: go` は、`go` コマンドがシステム上で見つからないことを意味しています。これは、Go 言語がまだインストールされていないか、インストールされていてもパスが正しく設定されていない可能性があります。
    
    Go 言語のインストールについては以下の手順に従ってください。
    
    ### Go 言語のインストール方法 (Mac)
    
    1. **Homebrew の使用**: Mac で最も簡単な Go 言語のインストール方法は Homebrew を使用することです。ターミナルを開いて以下のコマンドを実行してください。
        
        ```
        brew install go
        ```
        
        Homebrew がインストールされていない場合は、先に Homebrew のウェブサイトからインストール指示に従ってインストールしてください。
        
    2. **公式サイトからのインストール**: Go 言語の公式サイトからパッケージをダウンロードしてインストールすることもできます。公式サイト (https://golang.org/dl/) から macOS 用のインストーラをダウンロードし、画面の指示に従ってインストールしてください。
    
    インストール後、新しいターミナルセッションを開いて `go version` コマンドを実行し、Go が正しくインストールされたことを確認してください。
    
    ### 環境変数の設定
    
    Go 言語がインストールされた後でもパスが正しく設定されていない場合、ターミナルが `go` コマンドを認識できないことがあります。この場合、次のようにして Go 言語のバイナリがあるディレクトリをシステムのパスに追加する必要があります。
    
    1. シェルの設定ファイルを開く (例: `~/.zshrc` または `~/.bash_profile`):
        
        ```
        open ~/.zshrc
        ```
        
    2. ファイルに以下の行を追加して、Go のパスを設定する:
        
        ```
        export PATH=$PATH:/usr/local/go/bin
        ```
        
    3. 変更を適用するために、シェルの設定を再読み込みする:
        
        ```
        source ~/.zshrc
        ```
        
    
    上記の手順により Go 言語が正しくインストールされ、コマンドラインから `go` コマンドが使用できるようになるはずです。その後、再度 `go mod init` コマンドを実行して、`go.mod` ファイルを生成してください。
    
- 問題１（docker build中にエラー　React側）
    
    エラーメッセージには、`todo-app-frontend`のビルドプロセス中に`COPY package.json package-lock.json ./`というステップが失敗したことが示されています。この問題は、Dockerが`package.json`と`package-lock.json`のファイルを見つけることができなかったために発生しています。
    
    この問題を解決するためのステップは次のとおりです。
    
    1. **ファイルの存在を確認する**:
        - `frontend`ディレクトリに`package.json`と`package-lock.json`が存在しているかを確認します。これらのファイルはReactアプリケーションを構築する際に必須です。
    2. **コンテキストの問題を確認する**:
        - DockerはデフォルトでDockerfileが置かれているディレクトリをビルドコンテキストとして使用します。`frontend`ディレクトリ内にDockerfileがあり、`package.json`および`package-lock.json`がそのディレクトリ内にない場合は、Dockerはファイルを見つけることができません。
    3. **Reactアプリケーションの初期化**:
        - もしこれらのファイルがない場合は、Reactアプリケーションを初期化する必要があります。以下のコマンドを使用して`frontend`ディレクトリ内でReactアプリケーションを初期化することができます。
        
        ```bash
        cd frontend
        npx create-react-app .
        
        ```
        
        これにより、必要な`package.json`と`package-lock.json`が生成されます。
        
    4. **パスの修正**:
        - パスが正しいことを確認してください。`COPY`コマンドは相対パスに基づいてファイルをコピーします。Dockerfileが`frontend`ディレクトリ内にあること、そして`package.json`と`package-lock.json`も同じディレクトリ内にあることを確認してください。
    5. **Dockerの再ビルド**:
        - 上記の問題が解決したら、再度ビルドを試みます。
        
        ```bash
        docker-compose up --build
        
        ```
        
    
    これらのステップを実行することで、エラーの原因を特定し、修正することができるはずです。その後、Dockerコンテナのビルドが成功するかを確認してください。
    
- 問題２（docker build中にエラー　Go側）
    
    エラーメッセージには、`go.mod` ファイルが見つからないという内容が含まれています。これは、Dockerがビルドのコンテキストとして指定されたディレクトリ内に `go.mod` ファイルを見つけられなかったことを意味します。これを解決するには以下のステップを確認します。
    
    1. **ファイルの存在を確認する**: `backend` ディレクトリ内に `go.mod` と `go.sum` ファイルが存在することを確認してください。Goモジュールの初期化が必要な場合は、以下のコマンドを `backend` ディレクトリで実行することでこれらのファイルを生成できます。
        
        ```bash
        cd backend
        go mod init example.com/mymodule
        
        ```
        
        これにより、`go.mod` ファイルが作成されます。`go.sum` ファイルは依存関係をインストールすると生成されます。
        
    2. **Dockerfileのパスを確認する**: `COPY` コマンドが `backend` ディレクトリのコンテキストで実行されるように、`docker-compose.yml` 内でのビルドコンテキストが正しく設定されていることを確認してください。
        
        ```yaml
        services:
          backend:
            build:
              context: ./backend
              dockerfile: Dockerfile
            # ...
        
        ```
        
    3. **ディレクトリ構造を確認する**: ご自身のプロジェクトのディレクトリ構造が以下のようになっているか確認してください。
        
        ```
        todo-app/
        ├── docker-compose.yml
        ├── backend/
        │   ├── Dockerfile
        │   ├── go.mod
        │   ├── go.sum
        │   ├── (その他のGoソースファイル)
        └── frontend/
            ├── Dockerfile
            ├── package.json
            ├── (その他のReactソースファイル)
        
        ```
        
    
    これらの点を確認し、修正した後、再度ビルドを試みてください。上記のチェックリストに沿って問題が解決しない場合、`docker-compose.yml` と `Dockerfile` の内容をもう一度見直し、どこかでパスが間違っていないか、あるいはファイルが適切な場所にあるかを再確認してください。
    

### ステップ 2: バックエンドの設定

1. **Golangプロジェクトの初期化**: `backend` ディレクトリ内で `go mod init` コマンドを実行し、新しいGoモジュールを初期化します。
2. **REST APIの構築**: GolangでHTTPサーバを立て、TODOリストとタスクの管理に必要なエンドポイントを実装します。

### ステップ 3: フロントエンドの設定

1. **Reactプロジェクトの作成**: `frontend` ディレクトリで `npx create-react-app my-app --template typescript` コマンドを実行し、TypeScriptを用いたReactプロジェクトを作成します。
2. **UIコンポーネントの実装**: Reactを使って、TODOリストを表示するコンポーネント、タスクを追加するフォーム、タスクを完了としてマークする機能を実装します。

### ステップ 4: バックエンドとフロントエンドの連携

1. **APIクライアントの実装**: Reactアプリケーション内で、Golangバックエンドと通信するためのAPIクライアントを実装します。`fetch` または `axios` などのライブラリを用いることが一般的です。
2. **CORSの設定**: GolangのバックエンドでCORSを設定し、Reactアプリケーションからのリクエストを許可します。

### ステップ 5: Dockerコンテナのビルドと実行

1. *

ビルド**: `docker-compose up --build` コマンドを実行し、Dockerコンテナをビルドして起動します。

1. **動作確認**: ブラウザを開き、`localhost` の指定したポートにアクセスして、アプリケーションが正しく動作するか確認します。

このステップバイステップの説明には、具体的なコードやコマンド、詳細な設定は含まれていませんが、上記のプロセスに沿って開発を進めることができます。それぞれのステップにおいて、具体的なコードの実装や詳細な設定が必要になる場合、それぞれの技術のドキュメントやコミュニティが提供するリソースを参照しながら進めるとよいでしょう。